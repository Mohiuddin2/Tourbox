// Dev loggin middleware --want to run into development env
if (process.env.NODE_ENV !== "production") {
  require('dotenv').config();
}
require('dotenv').config()

// console.log(process.env.Api_Key)
const express = require('express');
const path = require('path');
const mongoose = require('mongoose');


const app = express();

const ejsMate = require('ejs-mate');
const session = require('express-session');
const flash = require('connect-flash');

const ExpressError = require("./utility/ExpressError");
const methodOverride = require('method-override');
const passport = require("passport");

const LocalStrategy = require("passport-local");
const User = require("./models/user");
const helmet = require('helmet')


const mongoSanitize = require('express-mongo-sanitize');
const userRoutes = require('./routes/users');
const campgroundsRoute = require("./routes/campground"); // model
const reviewsRoute = require("./routes/reviews");; //model

const MongoDBStore = require("connect-mongo")(session);


// const { campgroundSchema, reviewSchema } = require("./schemas.js"); // Joi Server side validation
const catchAsync = require("./utility/catchAsync");



const { expression } = require("joi");


const dotenv = require("dotenv").config();
const morgan = require("morgan"); //Logger




const userRoute = require("./routes/userRoute");

//Load env vars
// dotenv.config({ path: "./config/config.env" });

const mongoURI = "mongodb://localhost:27017/yelpcamp";
// const mongoURI =process.env.MongoURL;
// connect mongoose
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const db = mongoose.connection;
db.on("error", console.error.bind(console, "Connection error:"));
db.once("open", () => {
  console.log("Database Connected");
});


// mongo securiy db security for restricting using $
app.use(mongoSanitize({
  replaceWith: '_',
}));



const store = new MongoStore({
  url: mongoURI,
  secrete: "TourboxSecret",
  touchAfter: 24*3600
 })

store.on('error', function(e){
  console.log('Session store error', e)
})

// For connect flash must follow this secuencial order-- accor. to doc pass.. initialize will be after session as bellow
app.use(
  session({
    store,
    name:'session',
    secret: "TourboxSecret",
    resave: false,
    saveUninitialized: true,
    cookie: {
      httpOnly: true,
      // secure:true,
      expires: Date.now() + 1000 * 60 * 60 * 24 * 7,
      maxAge: 1000 * 60 * 60 * 24 * 7,
    },
  })
);
// Connect-flash must follow order-- before router and flas.. app use
app.use(flash());
// passport will be here--
// app.use(helmet())
app.use(
  helmet({
    contentSecurityPolicy: false,
  })
);
// content security policy configurng Helmet
const scriptSrcUrls = [
  "https://stackpath.bootstrapcdn.com",
  "https://api.tiles.mapbox.com",
  "https://api.mapbox.com",
  "https://kit.fontawesome.com",
  "https://cdnjs.cloudflare.com",
  "https://cdn.jsdelivr.net",
];
const styleSrcUrls = [
  "https://kit-free.fontawesome.com",
  "https://stackpath.bootstrapcdn.com",
  "https://api.mapbox.com",
  "https://api.tiles.mapbox.com",
  "https://fonts.googleapis.com",
  "https://use.fontawesome.com",
];
const connectSrcUrls = [
  "https://api.mapbox.com",
  "https://*.tiles.mapbox.com",
  "https://events.mapbox.com",
];
const fontSrcUrls = [];
app.use(
  helmet.contentSecurityPolicy({
      directives: {
          defaultSrc: [],
          connectSrc: ["'self'", ...connectSrcUrls],
          scriptSrc: ["'unsafe-inline'", "'self'", ...scriptSrcUrls],
          styleSrc: ["'self'", "'unsafe-inline'", ...styleSrcUrls],
          workerSrc: ["'self'", "blob:"],
          childSrc: ["blob:"],
          objectSrc: [],
          imgSrc: [
              "'self'",
              "blob:",
              "data:",
              "https://res.cloudinary.com/dgbkufw6z/", //SHOULD MATCH YOUR CLOUDINARY ACCOUNT! 
              "https://images.unsplash.com",
              "https://images.pexels.com/"
          ],
          fontSrc: ["'self'", ...fontSrcUrls],
      },
  })
);



app.use(passport.initialize());
app.use(passport.session());
// passport.use(new LocalStrategy(User.authenticate()))

passport.use(
  new LocalStrategy(
    {
      usernameField: "username",
      passwordField: "password",
    },
    User.authenticate() 
  )
);




passport.serializeUser(User.serializeUser()); // for how do we store user in the session
passport.deserializeUser(User.deserializeUser()); // for removing user form session

app.use((req, res, next) => {
  // console.log(req.query)
  res.locals.currentUser = req.user, // this for session logged in or for
  res.locals.success = req.flash("success");
  res.locals.error = req.flash("error");
  next();
});
//




//to execute folowing
app.engine("ejs", ejsMate);
app.set("view engine", "ejs"); // setting ejs view engine
app.set("views", path.join(__dirname, "views"));
app.use(express.static(path.join(__dirname, "public")));
app.use(express.urlencoded({ extended: true }));
app.use(methodOverride("_method"));

// Router
app.use("/", userRoute);
app.use("/campgrounds", campgroundsRoute);
app.use("/campgrounds/:id/reviews", reviewsRoute);

const sessionconfig = {
  secret: "High_secrete",
  resave: false,
  saveUninitialized: false,
  store: store,
  // cookie: { secure: true }
};
app.use(session(sessionconfig));
// Middleware for session
const isAuth = (req, res, next) => {
  if (req.session.isAuth) {
    next();
  } else {
    res.redirect("/login");
  }
};

// Logout
app.post("/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) throw err;
    res.redirect("/login");
  });
});

// Home
app.get("/", (req, res) => {
  // req.session.isAuth = true;
  res.render("home");
});

// This is mystry I need add this on project

app.all("*", (req, res, next) => {
  next(new ExpressError("Page Not Found", 404));
});

// default error handler..
app.use((err, req, res, next) => {
  const { statusCode = 500 } = err;
  if (!err.message) err.message = "Saomething Went Wrong";
  res.status(statusCode).render("error", { err });
});

app.listen(5000, () => {
  console.log("Serving on port 5000");
});
